info:
    name: '@project.parent.name@'
    version: '@project.version@'

server:
    address: 0.0.0.0
    servlet:
        context-path: /
    port: 8080

management:
    endpoints.web:
        exposure.include: '*'
    health:
        jms:
            enabled: false
        livenessstate:
            enabled: true
        readinessstate:
            enabled: true
        binders:
            enabled: true
    server:
        address: 0.0.0.0
        port: 8081
    metrics:
        export:
            prometheus:
                enabled: true
    endpoint:
        metrics:
            enable: true
        prometheus:
            enable: true
        health:
            show-details: always
            probes:
                enabled: true


kafka:
    broker: localhost:9092

spring:
    cloud:
        stream:
            function:
                definition: moveData;processOrdersVipCustomersProto

            default-binder: kstream

            binders:
                kstream:
                    type: kstream
                    environment:
                        spring.cloud.stream.kafka.streams.binder:
                            brokers: ${kafka.broker}
                            configuration:
                                security.protocol: SSL
                                default.value.serde: io.confluent.kafka.streams.serdes.protobuf.KafkaProtobufSerde
                                derive.type: true
                                schema.registry.url: https://cp-schema-registry.cp-schema-registry.svc.cluster.local
                                schema.registry.ssl.truststore.location: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_LOCATION}
                                schema.registry.ssl.truststore.password: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_PASSWORD}
                                schema.registry.ssl.keystore.location: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_LOCATION}
                                schema.registry.ssl.keystore.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_PASSWORD}
                                schema.registry.ssl.key.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEY_PASSWORD}
                                ssl.truststore.location: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_LOCATION}
                                ssl.truststore.password: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_PASSWORD}
                                ssl.keystore.location: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_LOCATION}
                                ssl.keystore.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_PASSWORD}
                                ssl.key.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEY_PASSWORD}


                globalktable:
                    type: globalktable
                    environment:
                        spring.cloud.stream.kafka.streams.binder:
                            brokers: ${kafka.broker}
                            configuration:
                                security.protocol: SSL
                                default.value.serde: io.confluent.kafka.streams.serdes.protobuf.KafkaProtobufSerde
                                derive.type: true
                                schema.registry.url: https://cp-schema-registry.cp-schema-registry.svc.cluster.local
                                schema.registry.ssl.truststore.location: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_LOCATION}
                                schema.registry.ssl.truststore.password: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_PASSWORD}
                                schema.registry.ssl.keystore.location: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_LOCATION}
                                schema.registry.ssl.keystore.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_PASSWORD}
                                schema.registry.ssl.key.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEY_PASSWORD}
                                ssl.truststore.location: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_LOCATION}
                                ssl.truststore.password: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_PASSWORD}
                                ssl.keystore.location: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_LOCATION}
                                ssl.keystore.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_PASSWORD}
                                ssl.key.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEY_PASSWORD}

                source-kafka:
                    type: kafka
                    environment:
                        spring.cloud.stream.kafka.binder:
                            brokers: ${kafka.broker}
                            configuration:
                                security.protocol: SSL
                                value.deserializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer
                            consumer-properties:
                                derive.type: true
                                schema.registry.url: https://cp-schema-registry.cp-schema-registry.svc.cluster.local
                                schema.registry.ssl.truststore.location: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_LOCATION}
                                schema.registry.ssl.truststore.password: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_PASSWORD}
                                schema.registry.ssl.keystore.location: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_LOCATION}
                                schema.registry.ssl.keystore.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_PASSWORD}
                                schema.registry.ssl.key.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEY_PASSWORD}
                                ssl.truststore.location: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_LOCATION}
                                ssl.truststore.password: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_PASSWORD}
                                ssl.keystore.location: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_LOCATION}
                                ssl.keystore.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_PASSWORD}
                                ssl.key.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEY_PASSWORD}

                target-kafka:
                    type: kafka
                    environment:
                        spring.cloud.stream.kafka.binder:
                            brokers: ${kafka.broker}
                            configuration:
                                security.protocol: SSL
                                value.serializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer
                            producer-properties:
                                derive.type: true
                                schema.registry.url: https://cp-schema-registry.cp-schema-registry.svc.cluster.local
                                schema.registry.ssl.truststore.location: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_LOCATION}
                                schema.registry.ssl.truststore.password: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_PASSWORD}
                                schema.registry.ssl.keystore.location: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_LOCATION}
                                schema.registry.ssl.keystore.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_PASSWORD}
                                schema.registry.ssl.key.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEY_PASSWORD}
                                ssl.truststore.location: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_LOCATION}
                                ssl.truststore.password: ${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_PASSWORD}
                                ssl.keystore.location: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_LOCATION}
                                ssl.keystore.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_PASSWORD}
                                ssl.key.password: ${SPRING_KAFKA_PROPERTIES_SSL_KEY_PASSWORD}

            bindings:
                moveData-in-0:
                    destination: CustomerDetails-proto
                    binder: source-kafka
                    group: spring-cloud-kafka-streams-stream-globalktable-two-binder-proto
                moveData-out-0:
                    destination:  EnabledCustomer-proto
                    binder: target-kafka
                    contentType: application/x-protobuf

                processOrdersVipCustomersProto-in-0:
                    destination: OrdersInput-proto
                    binder: kstream
                    contentType: application/x-protobuf
                processOrdersVipCustomersProto-in-1:
                    destination: EnabledCustomer-proto
                    binder: globalktable
                    contentType: application/x-protobuf
                processOrdersVipCustomersProto-out-0:
                    destination: OrdersOutput-proto
                    binder: kstream
                    contentType: application/x-protobuf

            kafka:
                streams:
                    binder:
                        deserialization-exception-handler: sendtodlq
                        functions:
                          processOrdersVipCustomersProto.applicationId: spring-cloud-kafka-streams-stream-globalktable-processOrdersVipCustomersProto
                        configuration:
#                            state.dir: state-store
                            acceptable.recovery.lag: 0

                binder:
                    configuration:
                        heartbeat.interval.ms: 10000
                        max.poll.records: 5000
            output:
                producer:
                    useNativeEncoding: true

logging:
    config: '/config/logback-k8s.xml'
    logback.access.configfilename: '/config/logback-access-k8s.xml'
